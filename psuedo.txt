program()
    while has more tokens && valid
        statement()
    return valid

//returns on next token
statement()
    if expectKeyword(INT)
        declaration()
    else if is identifier
        assignment()
    else if expectKeyword(IF)
        conditional()
    else if expectKeyword(WHILE)
        loop()
    else if expectKeyword(PRINT)
        print()
    else
        throw syntax exception

declaration() - recursive
    if not valid                                                //Termination case
        return

    if not identifier || !checkSymbolTable()
        valid = false
        return

    get next token

    if expectSymbol(,)                                          //does the same as expectKeyword()
        declaration()
    else if expectSymbol(;)
        return

    valid = false
    return

assignment()
    if not valid
        return

    if checkSymbolTable()
        get next token
        if expectSymbol(:=) && checkExpression()                //defined later
            if expectSymbol(;)
                return

    valid = false
    return

//returns on next token
conditional()
    if not valid
        return

    if expectKeyword(IF)
        if checkExpression()
            get next token
            if expectKeyword(THEN) && statement()
                get next token
                if expectSymbol(;)
                    return
                else if expectKeyword(ELSE) && statement()
                    get next token
                    return

    valid = false
    return


//Returns on next token
loop()
    if not valid
        return

    if expectKeyword(WHILE) && checkExpression() && expectKeyword(DO)
        if statement()
            get next token
            if expectKeyword(OD) && ";"
                get next token
                return

    valid = false
    return

//Returns on next token
checkExpression()
    if not valid
        return

    get next token

    if checkTerm()
        if expectSymbol(;)
            return
        else if expectOperator()                                //checks for an operator
            if checkTerm()
                get next token
                if expectSymbol(;)
                    return

    valid = false
    return

//should return on next token
@¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬@
!           Think about this            !
!           needs to pass validity      !
@¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬@
checkTerm()
    if not valid
        return false

    if integer_constant || checkSymbolTable()
        get next token
        return true
    else if "("
        get next token
        if checkExpression()
            if ")"
                get next token
                return true
    else if "-"
        get next token
        if checkTerm()
            return true

    valid = false
    return false